type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n1 +++ 2 * 3 -- 4\n/exit": "2\n-5\n11\n11\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit": "121\nBye!",
                     "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit": "48\nInvalid expression\nInvalid expression\nBye!",
                     "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit": "53\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    def check_sub(s):
        return s.count('-') % 2 != 0


    def calc_add(a, b, sub):
        if sub:
            return a - b
        else:
            return a + b


    def assign_var(s):
        a = s.split("=")
        left = a[0].strip()
        if not is_valid_id(left):
            print("Invalid identifier")
            return
        if len(a) == 2:
            right = a[1].strip()
            if is_valid_dgt(right):
                vars[left] = int(right)
            elif right in vars:
                vars[left] = right
            elif is_valid_id(right):
                print("Unknown variable")
            else:
                print("Invalid assignment")
        elif len(a) > 2:
            print("Invalid assignment")
        elif left in vars:
            print(vars[left])
        else:
            print("Unknown variable")


    def is_valid_id(s):
        if len(s) > 0 and all(x.isalpha() for x in s):
            return True
        else:
            return False


    def is_valid_dgt(s):
        try:
            int(s)
            return True
        except ValueError:
            return False


    def get_value(n):
        if n in vars:
            return get_value(vars[n])
        else:
            return int(n)


    def calc(s):
        sub = False
        out = 0
        expressions = 0
        numbers = 0
        for n in s.split():
            if n.count('-') + n.count('+') == len(n) and len(n) > 0:
                sub = check_sub(n)
                expressions += 1
            else:
                out = calc_add(out, get_value(n), sub)
                numbers += 1
        if numbers - expressions > 1:
            raise ValueError
        print(out)


    def get_help():
        print("The program calculates the sum and subtraction of numbers")


    i = input()
    vars = {}
    while i != "/exit":
        if i.startswith("/"):
            if i == "/help":
                get_help()
            else:
                print("Unknown command")
        elif "=" in i:
            assign_var(i)
        elif len(i) > 0:
            try:
                calc(i)
            except ValueError:
                print("Unknown variable")
        i = input()
    print("Bye!")
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Solved
record: -1
